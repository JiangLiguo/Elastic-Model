package Elastic::Manual::Intro;

# ABSTRACT: An introduction to Elastic::Model
__END__

=pod

=head1 DESCRIPTION

Elastic::Model is a NoSQL object-persistence framework for Moose using
ElasticSearch as a backend.  It aims to Do the Right Thing with minimal
extra code, but allows you to benefit from the full power of ElasticSearch
as soon as you are ready to use it.

=head1 WHAT IS ELASTICSEARCH?

L<ElasticSearch|http://www.elasticsearch.org> is an open-source
L<Lucene|http://lucene.apache.org/core/>-based full-text search engine,
and a NoSQL document store / database.

=head2 Schema-free and document oriented

ElasticSearch stores your objects as JSON documents. Most Perl objects
can be mapped easily to their JSON equivalent.

It is schema free, in that you don't need to define your
field/properties/attributes ahead of time; you can just toss it a JSON
document and it'll try to autodetect data types and index your doc. That
said, the power of full text search comes from the ability to configure
your search to suit your data and requirements. Sophisticated options
exist to give you complete control over how your data is indexed.

=head2 Real-time

ElasticSearch is a real-time data store (as soon as your document is indexed, it
can be retrieved from any node in the cluster) and has near-real-time search.
By default, docs become visible to search within 1 second of being indexed.

=head2 Distributed

ElasticSearch is built to scale out of the box.  It is easy to start with a
single node, and to add new nodes as required, giving you high availability
and huge scale. A cluster can scale to hundreds of nodes and terrabytes of
data. If a node goes down, the cluster will automatically redistribute and
just keep on working.

=head1 GETTING STARTED

=head2 Install ElasticSearch

You need a recent version of Java installed, then download the current
stable release of ElasticSearch from L<http://www.elasticsearch.org/download/>.
For instance:

    curl -L -O https://github.com/downloads/elasticsearch/elasticsearch/elasticsearch-0.19.4.tar.gz
    tar -xzf elasticsearch-0.19.4.tar.gz

=head2 Install Elastic::Model

Use your favourite CPAN installer:

    cpanm Elastic::Model

Or, if you want to run the full test suite, install Elastic::Model as:

    ES_HOME=/path/to/elasticsearch cpanm Elastic::Model

=head2 Start ElasticSearch

    cd elasticsearch-0.19.4/
    ./bin/elasticsearch -f      # -f starts the server in the foreground

You now have a running ElasticSearch cluster with one node. You can test that
it is running with:

    curl http://localhost:9200/?pretty=true

=head1 A SIMPLE EXAMPLE

=head2 Create a Model

First set up a simple L<model|Elastic::Manual::Terminology/Model>.  The model
handles the relationship between your classes and ElasticSearch.

    package MyApp;

    use Elastic::Model;

    namespace 'myapp' => (
        types   => {
            user    => 'MyApp::User'
        },
        # default if not specified:
        # domains => ['myapp'],
    );

    no Elastic::Model;

    1;

Your model must define at least one L<namespace|Elastic::Manual::Terminology/Namespace>,
which tells Elastic::Model which
L<type|Elastic::Manual::Terminology/Type> (like a table in a DB) should be
handled by which of your classes.  So the above declaration says that objects
of class C<MyApp::User> will be stored in the C<user> type in ElasticSearch.

Your model must also define at least one L<domain|Elastic::Manual::Terminology/Domain>
(which defaults to the C<name> of the namespace). A C<domain> can be an
L<index|Elastic::Manual::Terminology/Index> (like a database in a relational DB)
or an L<alias|Elastic::Manual::Terminology/Alias> (which points to one or
more indices). It doesn't have to exist yet.

=head2 Create your User class

    package MyApp::User;

    use Elastic::Doc;
    use DateTime();

    has 'name' => (
        is  => 'rw',
        isa => 'Str',
    );

    has 'email' => (
        is  => 'rw',
        isa => 'Str',
    );

    has 'created' => (
        is      => 'ro',
        isa     => 'DateTime',
        default => sub { DateTime->now }
    );

    no Elastic::Doc;

    1;

This simple Moose class has only one extra line: "C<use Elastic::Doc;>". At the
moment we're not configuring anything else, but because Moose allows us to
introspect classes, we have enough information to setup everything we need.

=head2 Using your application

    #!/bin/env perl

    use strict;
    use warnings;
    use MyApp();

    my $model  = MyApp->new();

This creates an instance of your model, with a connection to a local
ElasticSearch cluster.  The last line is the equivalent of:

    my $es     = ElasticSearch->new( servers => 'localhost:9200' );
    my $model  = MyApp->new( es => $es );

Then, create an instance of your domain.

    my $domain = $model->domain('myapp');

=head3 Setup your index

Before we get started, we need to create our L<index|Elastic::Manual::Terminology/Index>
in ElasticSearch.

    $domain->admin->create_index();

The index name defaults to the domain name, so the above line is the equivalent
of:

    $domain->admin->create_index( $domain->name );

This has created L<index|Elastic::Manual::Terminology/Index> C<myapp> (where
an index is like a database in a relational DB), which contains
L<type|Elastic::Manual::Terminology/Type> C<user> (where a type is like a
table in a database) and the type's L<mapping|Elastic::Manual::Terminology/Mapping>
(which is like the schema or column definition).

Now, our index is ready to be used.

=head3 Create a scope

Scopes are discussed in detail in L<Elastic::Model::Scope>, but in brief,
a C<scope> is an in-memory cache.  You need to create a scope before accessing
any docs in ElasticSearch, and it should stay in scope until you are done, eg:

    {
        my $scope = $model->new_scope;
        # do your work here
    }

    # scope is cleared

Typically, you would create a scope at (eg) the beginning of a web request,
and let it go out of scope at the end of the request.

=head3 Create an object

Normally, you would create an object with:

    my $user = MyApp::User->new(...)

but to use all of the magic of Elastic::Model, you must create your object
via the C<$domain> object:

    my $user    = $domain->new_doc(
        user => {                           # $type => \%args_to_new
            id    => 1,
            name  => 'Clinton',
            email => 'clint@domain.com',
        }
    );

    $user->save;                            # save to ElasticSearch

The user object now has a UID (unique ID), which contains
the C<index> name (C<"myapp">), the C<type> name (C<"user">) and the C<id> (C<1>).
If no ID is specified, then ElasticSearch will auto-generate a unique ID.
The UID also contains the current C<version> number, which ElasticSearch uses
to make sure that old docs don't overwrite more recently changed docs.

    my $uid = $user->uid;


=head3 Retrieve an object by ID

Before we try to retrieve the object from ElasticSearch itself, we should clear
the scope. Otherwise, we'll just get the same object back from the in-memory
cache.  Normally, this would be what you want, but given that we're trying to
demonstrate access to ElasticSearch itself:

    undef $scope;
    $scope = $model->new_scope;

Now, we can retrieve the user object from ElasticSearch, using the
C<type> and C<id>:

    $user = $domain->get( type=> 'user', id => 1 );

If you already have the C<UID>, you can use that instead:

    $user = $domain->get( $uid );

=head3 Update your object

    $user->email( 'clinton@domain.com' );
    print $user->has_changed;
    # 1

    print $user->has_changed('email');
    # 1

    print $user->old_value('email');
    # 'clint@domain.com';

    $user->save;

    print $user->uid->version;
    # 2

    print $user->has_changed;
    # 0

When you change an object, Elastic::Model keeps track of what attributes have
changed (with L<has_changed()|Elastic::Model::Role::Doc/"has_changed()">)
and their original values
(L<old_value()|Elastic::Model::Role::Doc/"old_value()">).

When you save the object, the C<version> number is incremented.

TODO: DEALING WITH CONFLICTS - HOW DO WE RETRIEVE THE LATEST VERSION TO UPDATE
IT?

=head3 Creating a view

In order to query the objects stored in ElasticSearch, you need to create
a L<view|Elastic::Model::View>. A view can cross multiple indices and
multiple types. For instance:

    $view = $model->view;               # all domains known to the $model
    $view = $domain->view;              # a view across $domain->name
    $view = $model->view->index(        # a view across two indices
        ['index_1','index_2']
    );

When setting an attribute on a view, a cloned instance of the old view is
returned, meaning that you can use one view to derive another:

    $all   = $domain->view;             # view across all types in $domain
    $users = $all->type('user');        # docs of type 'user' in index $domain
    $clint = $users->queryb({           # users whose name is 'clinton'
        name => 'clinton'
    });

=head3 Using a view to search

A C<view> is used to perform queries on the data in ElasticSearch. Queries
can be specified using the standard
L<ElasticSearch query DSL|http://www.elasticsearch.org/guide/reference/query-dsl/>
or with the more Perlish more compact L<ElasticSearch::SearchBuilder> syntax.

Standard query DSL:

    $search = $view->query( { text =>  { name    => 'clinton' }})
                   ->filter({ range => { created => { gt => '2012-01-01' }}});

SearchBuilder syntax:

    $search = $view->queryb(  { name    => 'clinton'             })
                   ->filterb( { created => { gt => '2012-01-01' }});

Once you have defined your view, you call a search method (eg
L<search()|Elastic::Model::View/"search()">) which performs
the search and returns a L<Results|Elastic::Model::Results> object.

    my $results = $search->search;
    print "Total results found: ".$results->total;

    while (my $doc = $results->next_doc) {
        print $doc->name."\n"
    }

Views can also be used to return highlighted results, and
L<facets|http://www.elasticsearch.org/guide/reference/api/search/facets/>,
which provide aggregated results, much like GROUP-BY functions in SQL, for
instance, the most popular terms, or the number of posting per day.

